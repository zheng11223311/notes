文件的四种状态：
版本控制就是对文件的版本控制，要对文件进行修改，提交等操作，首先要知道文件当前在什么状态，
不然可能会提交了现在还不想提交的文件，或者是要提交的文件没有提交上

Untracked：未跟踪，此文件在文件夹中，但并没有加入到git 库，不参与版本控制，通过 git add 状态变为staged
Unmodify：文件已经入库，未修改，即版本库中的文件快照内容与文件夹中的完全一致，这种类型的文件有两种去处，
如果他被修改，而变为 Modified ，如果使用 git rm 移除版本库，则成为Untracked 文件
Modified：文件已经被修改，仅仅是修改，并没有进行其他的操作，这个文件也有两个去处，通过 git add 可进入暂存 staged 状态
，使用 git checkout 则丢弃修改过，返回到 unmodify 状态，这个 git checkout 即从库中取出文件，覆盖当前修改
Staged：暂存状态，执行 git commit 则将修改同步到库中，这是库中的文件和本地文件又变为一致，文件为 unmodify 状态，
执行 git reset HEAD filename 取消暂存，文件状态为Modified

查看文件状态：
上面说的四种状态，通过如下命令可以查看到文件的状态：
#查看指定文件状态
git status [filename]

#查看所有文件状态
git status

#添加所有文件到暂存区
git add .

#提交暂存区中的内容到本地仓库（提交信息）
git commit -m
或 
git commit -m 文件


忽略文件：
有些时候我们不想把文件纳入版本控制中，比如数据库文件，临时文件，设计文件等
在主目录下建立 .gitignore 文件，此文件有如下规则：
1.忽略文件中的空行或以# 开始的行将会被忽略
2.可以使用Linux 通配符，例如：星号（*）代表任意多字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，
大括号（{string1，string2，...}）代表可选的字符串等
3.如果名称的最前面是一个感叹号（！），表示例外规则，将不被忽略
4.如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，二子目录中的文件不忽略
5.如果名称的最后面是一个路径分隔符（/），表示要忽略的文件是此目录下该名称的子目录，而非文件夹（默认文件或目录都忽略）

# 注释
*.txt	#忽略所有 .txt 结尾的文件
！lib.txt	#但lib.txt 除外
/temp	#仅忽略项目根目录下的TODO 文件，不包括其他目录temp
build/	#忽略build/ 目录下的所有文件
doc/*.tx	#会忽略doc/notes.txt 但不包括doc/server/arch.txt 












