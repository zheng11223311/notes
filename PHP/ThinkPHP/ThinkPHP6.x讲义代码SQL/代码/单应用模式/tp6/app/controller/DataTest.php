<?php
namespace app\controller;
use app\BaseController;
use app\model\User;
use think\facade\Db;

class DataTest extends BaseController
{

    // 需要继承BaseController
    public function initialize()
    {
        // 初始化时间
        parent::initialize(); // TODO: Change the autogenerated stub
        Db::event('before_select', function ($query) {
            echo '执行了批量查询';
        });

        Db::event('after_update', function ($query) {
            echo '修改被执行...';
        });
    }

    public function index()
    {
        //使用DB 类,查询tp_user 表
        //上面开启了 Db::event('before_select',  就查询不到结果
        // $user = Db::table('tp_user')->select();
        //    dump($user);
        //connect('mysql') 加载 database.php 配置文件的mysql 配置项
        // $user = Db::connect('mysql')->table('tp_user')->select();
        // find() 查询一条
        // where('id', 27) 条件 id=27
        // where('id','>=', 27) 条件 id>=27
        // $user = Db::table('tp_user')->where('id', 27)->find();
        //Db::getLastSql() 最近使用的一条sql 语句
        // return Db::getLastSql();
        // findOrFail 查询一条且错误时抛出异常
        // $user = Db::table('tp_user')->where('id', 527)->findOrFail();
        // findOrEmpty 没有数据时返回空数组
        // $user = Db::table('tp_user')->where('id', 527)->findOrEmpty();
        // select 没有数据时返回空数组
        // $user = Db::table('tp_user')->where('status', 3)->select();
        // selectOrFail 查询一条且错误时抛出异常
        // $user = Db::table('tp_user')->where('status', 3)->selectOrFail();
        // toArray 将结果转换成数组
        // $user = Db::table('tp_user')->select()->toArray();
        // dump()  以二维数组展示
        //dump($user);

        // name 自动使用表前缀,table 不能使用表前缀
        // $user = Db::name('user')->select();
        // value 查询单个值 返回指定查询的字段对应的值,没有值时为null
        // return Db::table('tp_user')->where('id', 27)->value('username');
        // column 返回指定字段的值作为键和值
        // $user = Db::name('user')->column('username');
        //  column 返回指定字段的值作为值,指定字段id 作为键
        // $user = Db::name('user')->column('username', 'id');

        //避免读取过多,内存开销过大,每次读取100条处理后在读取
        //    Db::name('user')->chunk(100, function ($users) {
        //        foreach ($users as $user) {
        //            dump($user);
        //        }
        //        echo 1;
        //    });

        //    $cursor = Db::name('user')->cursor();
        //    dump($cursor);
        //    foreach ($cursor as $user) {
        //     //    dump($user);
        //     // var_dump($user);
            
        //    }

        // order 排序
        //$user = Db::name('user')->where('id', 27)->order('id', 'desc')->find();
        ///$user = Db::name('user')->where('id', 27)->order('id', 'desc')->select();
        //dump($user);

        //$userQuery = Db::name('user');
        //$userFind = $userQuery->where('id', 27)->find();
        //$userSelect = $userQuery->select();
        //$data1 = $userQuery->order('id', 'desc')->select();
        //removeOption 清除上次保留的拼接的SQL 字符order
        //$data2 = $userQuery->removeOption('order')->select();
        //return Db::getLastSql();
        //return json($userSelect);

        // 查询/新增/修改 都要使用json 来表明list 是一个数组
        // 查询时,使用json 读取出来的list 为一个数组,否则为字符串
        $user = Db::name('user')->json(['list'])->find(287);
        // 查找list 字段中的数组的指定值 where('list->username', '小红')
        //$user = Db::name('user')->json(['list'])->where('list->username', '小红')->find();
        return json($user);
    }

    public function demo()
    {
        $user = Db::connect('demo')->table('tp_user')->select();
        return json($user);
    }

    //访问 http://127.0.0.1:808/DataTest/getUser
    public function getUser()
    {
        //使用app\model\User 类,user 类继承model 类的方法
        $user = User::select();
        return json($user);
    }

    public function insert()
    {
        $data = [
            'username'      =>      '辉夜',
            'password'      =>      '123',
            'gender'        =>      '女',
            'email'         =>      'huiye@163.com',
            'price'         =>      90,
            'details'       =>      '123',
            // 'list'          =>      ['username'=>'小红', 'gender'=>'女', 'email'=>'xiaohong@163.com']
            // 'abc'           =>      'def'
        ];

        // insert 插入不存在的字段会抛出异常
        // return Db::name('user')->insert($data);
        // field 查询的字段,验证插入的数据合法性,有不是 username, gender,email 中的数据就会报错
        // return Db::name('user')->field('username, gender,email')->insert($data);
        // strict 强行新增,抛弃不存在的字段,忽略异常
        // return Db::name('user')->strict(false)->insert($data);
         // INSERT INTO `tp_user` SET `username` = '辉夜' , `password` = '123' , `gender` = '女' , `email` = 'huiye@163.com' , `price` = 90 , `details` = '123'
        //  Db::name('user')->insert($data);
        // replace mysql 支持,与insert  都是写入,区别是后者表示在表中存在主键相同者报错,后者则修改
        // REPLACE INTO `tp_user` SET `username` = '辉夜' , `password` = '123' , `gender` = '女' , `email` = 'huiye@163.com' , `price` = 90 , `details` = '123'
        // Db::name('user')->replace()->insert($data);
        // return Db::getLastSql();
        // insertGetId 插入后返回当前id
        // return Db::name('user')->insertGetId($data);
        // save 可以自行判断是新增还是修改,依据是主键,存在主键则修改,不存在则新增
        // return Db::name('user')->save($data);
        // 定义list 为json 字段,才能插进去
        return Db::name('user')->json(['list'])->save($data);

    }

    public function insertAll()
    {
        $dataAll = [
            [
                'username'      =>      '辉夜',
                'password'      =>      '123',
                'gender'        =>      '女',
                'email'         =>      'huiye@163.com',
                'price'         =>      90,
                'details'       =>      '123',
                //'abc'           =>      'def'
            ],
            [
                'username'      =>      '辉夜',
                'password'      =>      '123',
                'gender'        =>      '女',
                'email'         =>      'huiye@163.com',
                'price'         =>      90,
                'details'       =>      '123',
                //'abc'           =>      'def'
            ]
        ];
        // insertAll  批量数据新增,也支持replace()
        return Db::name('user')->insertAll($dataAll);
    }

    public function update()
    {
            //    $data = [
            //        'username'      =>      '李白'
            //    ];
                // update 修改
            //    return Db::name('user')->where('id', 312)->update($data);

            //    $data = [
            //        'id'            =>      311,
            //        'username'      =>      '李黑'
            //    ];
            //    return Db::name('user')->update($data);

            // exp 指定字段可以执行SQL 函数操作
            // UPPER 将字符转化为大写的函数
            //    return Db::name('user')->where('id', 311)
            //                             ->exp('email', 'UPPER(email)')
            //                             ->update();

                //inc  默认自增1
                // dec 自减1,dec('status', 2) status 的字段自减2
            //    return Db::name('user')->where('id', 312)
            //                                 ->inc('price')
            //                                 ->dec('status', 2)
            //                                 ->update();

            // raw  更加简单灵活的方式的实现 exp 和自增自减
        // return Db::name('user')->where('id', 311)
        //                              ->update([
        //                                  'email'    =>      Db::raw('UPPER(email)'),
        //                                  'price'    =>      Db::raw('price + 1'),
        //                                  'status'   =>      Db::raw('status - 2')
        //                              ]);

        $data['list'] = ['username'=>'李白', 'gender'=>'男', 'email'=>'libai@163.com'];
         // 修改list 字段中的数组的指定username 的值 
        $data['list->username'] = '李黑';
        // return Db::name('user')->where('id', 301)->save($data);
        return Db::name('user')->where('id', 301)->json(['list'])->save($data);

    }

    public function delete()
    {
        // delete 根据主键删除,delete(301) 删除主键为301 的数据
        // return Db::name('user')->delete(301);
        // delete([229,230,231]) 删除多条数据
        // return Db::name('user')->delete([302,303,304]);
        // return Db::name('user')->where('id', 305)->delete();
        // delete(true) 删除所有数据
        // return Db::name('user')->delete(true);
    }
    // 访问 http://127.0.0.1:808/DataTest/query 
    public function query()
    {
        // where('id', '=', 76)  id=76 的字段
        // $user = Db::name('user')->where('id', '=', 76)->find();
        
         // where('id', 76)  id=76 的字段
        // $user = Db::name('user')->where('id', 76)->find();

        //where('id', '<>', 19)  id不等于 19 的字段
        // $user = Db::name('user')->where('id', '<>', 19)->select();

        // where('email', 'like', 'xiao%') email 中有xiao 开头的字段
        // $user = Db::name('user')->where('email', 'like', 'xiao%')->select();

        // where('email', 'like', ['xiao%', 'wu%'], 'or')  email 中有xiao 开头的字段或者有wu 开头的字段
        // $user = Db::name('user')->where('email', 'like', ['xiao%', 'wu%'], 'or')->select();
        // 默认是and
        // $user = Db::name('user')->where('email', 'like', ['xiao%', 'wu%'])->select();
        // $user = Db::name('user')->where('email', 'like', ['xiao%', 'wu%'],'and')->select();

        // whereLike('email', 'xiao%')  email 中有xiao 开头的字段
        // $user = Db::name('user')->whereLike('email', 'xiao%')->select();

        // whereNotLike email 中没有xiao 开头的字段
        // $user = Db::name('user')->whereNotLike('email', 'xiao%')->select();

        // where('id', 'between', '21,27') id 在[21,27] 范围之间的数据
        // $user = Db::name('user')->where('id', 'between', '21,27')->select();
        // $user = Db::name('user')->where('id', 'between', [21,27])->select();
        // $user = Db::name('user')->whereBetween('id', [21,27])->select();

        // where('id', 'in', '25,26,29') id 为25,26,29 的数据
        // $user = Db::name('user')->where('id', 'in', '25,26,29')->select();

        // where('uid', 'null') uid=null 的数据
        // $user = Db::name('user')->where('uid', 'null')->select();
        // $user = Db::name('user')->whereNull('uid')->select();

        // where('uid', 'not null') uid 不等于null 的数据
        // $user = Db::name('user')->where('uid', 'not null')->select();
        // $user = Db::name('user')->whereNotNull('uid')->select();
        
        // where('id', 'in', '19,21,22')  id 为25,26,29 的数据
        //$user = Db::name('user')->where('id', 'in', '19,21,22')->select();
        //$user = Db::name('user')->whereIn('id',  '19,21,22')->select();
        //$user = Db::name('user')->whereNotIn('id', '19,21,22')->select();

        // where('id', 'exp', 'IN (19,21,22)')   使用exp 来自定义字段后的SQL 语句(在where 后面自定义拼接语句)
        // $user = Db::name('user')->where('id', 'exp', 'IN (19,21,22)')->select();
        $user = Db::name('user')->whereExp('id', 'IN (19,21,22)')->select();

        //return Db::getLastSql();
        return json($user);
    }

    public function time()
    {
        // 查询时间字段
        // $user = Db::name('user')->where('create_time', '>', '2018-1-1')->select();
        //$user = Db::name('user')->where('create_time', 'not between', ['2019-1-1', '2019-12-1'])->select();
        // whereTime ">" 可以省略
        //$user = Db::name('user')->whereTime('create_time', '2018-1-1')->select();
        //$user = Db::name('user')->whereTime('create_time', '>', '2018-1-1')->select();
        //$user = Db::name('user')->whereBetween('create_time', ['2019-1-1', '2019-12-1'])->select();
        //$user = Db::name('user')->whereBetweenTime('create_time', '2019-1-1', '2019-12-1')->select();

        // 固定查询
        // whereYear('create_time') 查看本年的时间段的数据
        $user = Db::name('user')->whereYear('create_time')->select();
        // whereYear('create_time', 'last year') 查看上一年
        $user = Db::name('user')->whereYear('create_time', 'last year')->select();
        $user = Db::name('user')->whereYear('create_time', '2016')->select();
        // 查看 2小时前
        // SELECT * FROM `tp_user` WHERE `create_time` >= '2022-01-26 06:22:51'
        // $user = Db::name('user')->whereTime('create_time', '-2 hours')->select();
        // 查看两个时间段之间的数据
        // SELECT * FROM `tp_user` WHERE `create_time` BETWEEN '2016-01-01 00:00:00' AND '2016-12-31 23:59:59'
        $user = Db::name('user')->whereBetweenTimeField('create_time', 'update_time')->select();

        // return Db::getLastSql();
        return json($user);
    }

    public function poly()
    {
        // 聚合查询
        // count 返回数量,默认* ,所有字段
        // $result = Db::name('user')->count();
        //  查找uid 字段的不为null 的数据的长度
        // $result = Db::name('user')->count('uid');

        // max 查找price 字段数据的最大值
        $result = Db::name('user')->max('price');
        // min 查找price 字段数据的最小值
        $result = Db::name('user')->min('price');
        // min('email', false); 求出的值不是数值,则通过第二个参数强制转换,true 为转换
        $result = Db::name('user')->min('email', false);
        $result = Db::name('user')->min('email', true);
        $result = Db::name('user')->max('email', false);
        // $result = Db::name('user')->max('email');   //默认为true

        // 查询price 的平均值
        // $result = Db::name('user')->avg('price');
        // 查询price 的总和
        // $result = Db::name('user')->sum('price');
        
        //fetchSql 可以不执行SQL ,而返回SQL 语句,默认为true
        // "SELECT * FROM `tp_user`"
        $result = Db::name('user')->fetchSql(true)->select();
        //fetchSql 也是不执行SQL ,而返回带() 的SQL 语句,默认为true,,但是不需要select()
        // "( SELECT * FROM `tp_user` )"
        $result = Db::name('user')->buildSql(true);

        //求出所有男的uid
        //"( SELECT `uid` FROM `tp_two` WHERE  `gender` = '男' )"
        $subQuery = Db::name('two')->field('uid')->where('gender', '男')->buildSql(true);
        // SELECT * FROM `tp_one` WHERE ( `id` IN ( SELECT `uid` FROM `tp_two` WHERE `gender` = '男' ) )
        $result = Db::name('one')->where('id', 'exp', 'IN '.$subQuery)->select();

        // SELECT * FROM `tp_one` WHERE `id` IN (SELECT `uid` FROM `tp_two` WHERE `gender` = '男')
       $result = Db::name('one')->where('id', 'in', function ($query) {
           $query->name('two')->field('uid')->where('gender', '男');
       })->select();

        // query 执行查询
        $result = Db::query('SELECT * FROM tp_user');
        // execute 执行修改,删除,插入
        $result = Db::execute('UPDATE tp_user SET username="孙武" WHERE id=29');
        // return Db::getLastSql();
        return json($result);
    }

    public function linkUp()
    {
        // 链式查询
        $user = Db::name('user')->where('id', '>', 70)->select();

       $user = Db::name('user')->where([
           'gender'    =>      '男',
           'price'     =>      100
       ])->select();

       $user = Db::name('user')->where([
           ['gender', '=', '男'],
           ['price', '>', '100']
       ])->select();


       $map[] = ['gender', '=', '男'];  //$map[0]
       $map[] = ['price', 'in', [60,70,80]]; //$map[1]
        //  var_dump($map);
       $user = Db::name('user')->where($map)->select();
        // 字符串传递,简单粗暴的查询方式,whereRaw() 支持复杂字符串格式
        $user = Db::name('user')->whereRaw('gender="男" AND price IN (60,70,80)')->select();
        //采用预处理模式,:id 为后面 ['id'=>19] 的 'id'=>19 占位符
        $user = Db::name('user')->whereRaw('id=:id', ['id'=>19])->select();

        //field('*') 查询所有字段
        $user = Db::name('user')->field('*')->select();
        // field('id,username,email') 查询 id,username,email 字段
        $user = Db::name('user')->field('id,username,email')->select();
        $user = Db::name('user')->field(['id','username','email'])->select();
        // username as name field() 可以起别名
        // $user = Db::name('user')->field('id,username as name,email')->select();

        // fieldRaw 方法里,可以直接给字段设置MySQL 函数
        $user = Db::name('user')->fieldRaw('id,SUM(price)')->select();
        //  true 可以显式的查询(显式的性能比*好)获取所有字段,而不是*
        // SELECT `id`,`username`,`password`,`gender`,`email`,`price`,`details`,`uid`,`status`,`list`,`delete_time`,`create_time`,`update_time` FROM `tp_user`
        $user = Db::name('user')->field(true)->select();
        // withoutField 排除字段,可以屏蔽不想要的字段
        $user = Db::name('user')->withoutField('details')->select();

        // 插入时,可以验证字段的合法性,field('details') 指定必须为details 字段
        // $user = Db::name('user')->field('details')->insert($data);

        // alias 为user 起别名为a
        $user = Db::name('user')->alias('a')->select();
        // return Db::getLastSql();
        return json($user);
    }

    public function linkDown()
    {
        //  限制输出的个数 ,限制输出5条
        $user = Db::name('user')->limit(5)->select();
        //  从2 开始,输出5条 区间 [2,2+5]
        $user = Db::name('user')->limit(2,5)->select();
        $user = Db::name('user')->limit(0,5)->select(); 
        $user = Db::name('user')->limit(5,5)->select();
        // 分页,无需计算分页条数 (选择第几页,每页显示多少条)
        $user = Db::name('user')->page(2,5)->select();

        // order 排序 desc 倒序
        //$user = Db::name('user')->order('id', 'desc')->select();
        // 按create_time 倒序,如果相同,相同值,就按照price 正序
        //$user = Db::name('user')->order(['create_time'=>'desc', 'price'=>'asc'])->select();
        // FIELD 将指定字段的值排在最前面,其他desc 排序
        // oderRaw 支持排序是选择函数
        $user = Db::name('user')->orderRaw('FIELD(username, "樱桃小丸子") DESC')->select();

        //group('gender') 按照gender 分组
        //$user = Db::name('user')->field('gender, SUM(price)')->group('gender')->select();
        // 多字段分组,按照gender,password ,相同的gender,password 分为一组
        $user = Db::name('user')->field('gender, SUM(price)')->group('gender,password')->select();

        // having 分组后进行筛选
        $user = Db::name('user')
                                ->field('gender, SUM(price)')
                                ->group('gender')
                                ->having('SUM(price) > 600')
                                ->select();

        return Db::getLastSql();
        return json($user);
    }

    public function advanced()
    {
        // 高级查询
        // where  多个连缀查询
       $user = Db::name('user')
                   ->where('username|email', 'like', '%xiao%')
                   ->where('price&uid', '>', 0)
                   ->select();
                   

       $user = Db::name('user')->where([
           ['id', '>', 0],
           ['status', '=', 1],
           ['price', 'exp', Db::raw('>=80')],
           ['email', 'like', '%163%']
       ])->select();
        //  条件字符串复杂组装,比如使用exp 了,就使用raw() 方法
       $map = [
           ['id', '>', 0],
           ['price', 'exp', Db::raw('>=80')],
           ['email', 'like', '%163%']
       ];
        //  [$map]  表示带有(),优先执行
       $user = Db::name('user')
               ->where([$map])
               ->where('status', 1)
               ->select();

       $map1 = [
           ['username', 'like', '%小%'],
           ['email', 'like', '%163%']
       ];
       $map2 = [
           ['username', 'like', '%孙%'],
           ['email', 'like', '%.com%']
       ];
       $user = Db::name('user')->whereOr([$map1, $map2])->select();

        // whereOr 或者 
       $user = Db::name('user')->where(function ($query) {
           $query->where('id', '>', 0);
       })->whereOr(function ($query) {
           $query->where('username', 'like', '%小%');
       })->select();

        // whereRaw 带Raw 用于复杂查询
        // 对于比较复杂或者你不知道如何拼装的SQL 条件,那么就直接使用whereRaw() 即可
       $user = Db::name('user')
                   ->whereRaw('(username LIKE "%小%" AND status=1) OR id>0')
                   ->select();
        
        //参数绑定
        // :username 对应 ['username'=>'%小%', 'status'=>1, 'id'=>0] 中的username
        $user = Db::name('user')
                    ->whereRaw('(username LIKE :username AND status=:status) OR id>:id',
                                ['username'=>'%小%', 'status'=>1, 'id'=>0])
                    ->select();

        //return Db::getLastSql();
        return json($user);
    }

    public function speedy()
    {
        // 快捷查询
        // SELECT * FROM `tp_user` WHERE ( `update_time` = `create_time` )
        // whereColumn 比较两个字段
       $user = Db::name('user')
                   ->whereColumn('update_time', '=', 'create_time')
                   ->select();

        // whereFileName() 方法 ,查询某个字段的值,比如
        // whereEmail 查询email 的值
        $user = Db::name('user')->whereEmail('xiaoxin@163.com')->find();
        // 字段中就是username  不用驼峰,要根据字段来决定是否驼峰
        // create_time 则要驼峰whereCreateTime ,下划线需要驼峰
        $user = Db::name('user')->whereUsername('蜡笔小新')->find();
        // $user = Db::name('user')->whereUsername('蜡笔小新')->select();

        // getByFiledName() 查询某个字段,注意只能查询一条,不需要使用find()
        $user = Db::name('user')->getByEmail('xiaoxin@163.com');
        // getByFiledByFieldName() ,通过查询得到某个指定字段的单一值
        // getFieldByEmail(查询的值,返回数据对应字段的值) 得到username 的值
        $user = Db::name('user')->getFieldByEmail('xiaoxin@163.com', 'username');

        // when 可以通过条件判断,执行闭包里的分支查询
        // SELECT * FROM `tp_user` WHERE `username` LIKE '%小%'
        // true 执行第一个function,false 执行第二个function
        $user = Db::name('user')->when(false, function ($query) {
            $query->where('id', '>', 0);
        }, function ($query) {
            $query->where('username', 'like', '%小%');
        })->select();

        return Db::getLastSql();
        return json($user);
    }

    public function getter()
    {
        // 事务处理
        // 自动开启事务
       Db::Transaction(function () {
           Db::name('user')->where('id', 19)->save(['price'=>Db::raw('price + 3')]);
           Db::name('user')->where('id', 20)->save(['price'=>Db::raw('price - 3')]);
       });
       
        // 手动开启事务
        //    Db::startTrans();
        //    try {
        //        Db::name('user')->where('id', 19)->save(['price'=>Db::raw('price + 3')]);
        //        Db::name('user1')->where('id', 20)->save(['price'=>Db::raw('price - 3')]);

        //        Db::commit();
        //    } catch (\Exception $e) {
        //        echo '执行SQL失败，开始回滚数据';
        //        Db::rollback();
        //    }

        // 获取器:
        // 获取器的意思:将数据的字段进行转换处理再进行操作
        // 比如在获取数据列表的时候,将获取到的邮箱字段全部大写
        // 支持多个 withAttr链式调用
        $user = Db::name('user')->withAttr('email', function ($value, $data) {
            // var_dump($data);    //查询到的数据
            // var_dump($value);   //邮箱对应的值
            return strtoupper($value);
        })->select();

        return json($user);
    }

    public function collection()
    {
        // 数据集,是查询后的结果集
        $user = Db::name('user')->select();
        // dump($user);
        // 转化为数组
        // var_dump($user->toArray());
        // 数据集随机打乱
        // dump($user->shuffle());
        // 删除数据中的最后一个元素,返回删除的元素
        // dump($user->pop());
        // 这里的whereIn 不是数据库的whereIn,是属于结果集的
        // 使用方法一致
        dump($user->whereIn('id', [19,20,21]));
        // ... 方法
    }
}










