<?php
namespace app\model;
use think\Model;
use think\model\concern\SoftDelete;

// 模型User 对应一个数据表tb_user
// 数据表 tp_user_type 对应UserType 类
class User extends Model
{
    //默认使用是database.php 中的mysql 配置
    // 使用受保护的connection 修改配置
    // protected $connection='demo';

    //一对一 一条数据对一条数据 两张数据表关联
    // 与Profile 中的user ,这两个函数中存在一个函数就行
    // public function profile()
    // {
    //         //    Profile::class 等同于Profile
    //         // hasOne(关联模型,'外键','主键')
    //         // 关联模型(必须):关联的模型名或者类名
    //         // 外键:默认的外键规则是当前模型名(不含命名空间,下同)+_id,例如user_id
    //         // 主键: 当前模型主键,默认会自动获取也可以指定传入
    //     return $this->hasOne('Profile');
    //     return $this->hasOne(Profile::class);
    //         // 外键user_id
    //     return $this->hasOne(Profile::class,'user_id');
    // }

    //一对多
    public function profile()
    {
        return $this->hasMany(Profile::class, 'user_id');
    }

    public function book()
    {
        return $this->hasMany(Book::class, 'user_id');
    }

    //多对多关联
    public function roles()
    {
        // (要关联的角色表,中间表)
        return $this->belongsToMany(Role::class, Access::class);
    }





    // 如果 User 类改为UserModel ,就无法对应数据表tb_user,需要修改$name
    //添加后缀需要设置模型名称
    //protected $name = 'user';

    //设置主键,默认为id
    //protected $pk = 'id';

    //设置表,默认当前表
    //protected $table = 'tp_user';

    //初始化操作,必须是static ,模型和控制器都有初始化
    protected static function init()
    {
        //parent::init(); // TODO: Change the autogenerated stub
        // echo '初始化操作！';
    }


    //设置字段信息
    // 使用命令 php think optimize:schema
    // 在runtime/schema/ 下生成文件,复制内容过来
    //    protected $schema = [
    //        'id' => 'int',
    //        'username' => 'string',
    //        'password' => 'string',
    //        'gender' => 'string',
    //        'email' => 'string',
    //        'price' => 'float',
    //        'details' => 'string',
    //        'uid' => 'int',
    //        'status' => 'int',
    //        'list' => 'string',
    //        'delete_time' => 'datetime',
    //        'create_time' => 'datetime',
    //        'update_time' => 'datetime',
    //        '_pk' => 'id',
    //        '_autoinc' => 'id',
    //    ];

        //是否严格却分大小写
        protected $strict = false;

        // public function getUsername()
        // {
        //     $obj = $this->find(19);
        //     return $obj->getAttr('username');
        // }

    //设置status获取器,固定格式 get +字段名+attr(){}
    // 当获取值的时候会触发获取器
    // value 整条数据中的当前字段的值
    // data 查询得到的整条数据
    //    public function getStatusAttr($value,$data)
    //    {
    //        $arr = [-1=>'删除', 0=>'禁用', 1=>'正常', 2=>'待审核'];
    //        return $arr[$value];
    //    }

        // 设置一个虚拟nothing字段的修改器
        // 可以获得数据对应的值
       public function getNothingAttr($value, $data)
       {
           $arr = [-1=>'删除', 0=>'禁用', 1=>'正常', 2=>'待审核'];
           return $arr[$data['status']];
       }

    //email修改器
    // 当修改,新增时会触发修改器,在修改/新增之前调用此函数修改数据,在将数据修改/插入到数据库
    // 模型修改器只对模型方法有效,调用数据库方法无效,比如->insert()
       public function setEmailAttr($value)
       {
            // echo $value;
           return strtoupper($value);
       }

        // 范围查询的使用优先在获取器之前
        //强制全局查询条件，任何查询都必须加上这个条件
            // 定义全局
        // protected $globalScope = ['status'];

        //定义全局方法,与全局一一对应
        // public function scopeStatus($query)
        // {
        //     $query->where('status', -1);
        // }
        
        //查询范围,男 5条
        // 格式 scope+自定义(){}
        // public function scopeMale($query)
        // {
        //     $query->where('gender', '男')
        //             ->field('id,username,gender,email')
        //             ->limit(5);
        // }
        
        // 带参数的查询范围
        // value 为传进来的值
        // public function scopeEmail($query, $value)
        // {
        //     $query->where('email', 'like', '%'.$value.'%');
        // }
        
        //    public function scopePrice($query, $value)
        //    {
        //        $query->where('price', '>', $value);
        //    }


        //搜索器
        // 格式 search+字段+attr(){}
        // value 传递过来的字段值
        // data 传递过来的整个数组
       public function searchEmailAttr($query, $value, $data)
       {
        //    dump($value);
        //    dump($data);
           $query->where('email', 'like', '%'.$value.'%');
           if (isset($data['sort'])) {
               $query->order($data['sort']);
           }
       }
    
       public function searchCreateTimeAttr($query, $value, $data)
       {
           $query->whereBetweenTime('create_time', $value[0], $value[1]);
       }

    //独立开启自动时间戳写入
    // 插入修改/修改数据时,默认自动修改create_time/update_time 字段
    //protected $autoWriteTimestamp = true;
    // 全局开启 database.php ->  auto_timestamp=>true

    //自定义新增和修改的时间戳
    //protected $createTime = 'create_at';
    //protected $updateTime = 'update_at';
    //    不需要时间字段时设置为false
    //protected $createTime = false;
    //protected $updateTime = false;

    //protected $updateTime = false;

    //只读字段，修改时无法修改
    //protected $readonly = ['username', 'email'];

        //类型转换
        // 开启后,转换字段
    //    protected $type = [
    //        'status'        =>      'boolean',
    //        'price'         =>      'float',
    //        'create_time'   =>      'datetime:Y-m-d H:s'
    //    ];

    //废弃字段,就不再查询数据列表里了
    //protected $disuse = ['status', 'uid'];


    //设置JSON字段
    protected $json = ['list'];

    //开启软删除,软删除后,模型对数据库数据做了delete_time 标记
    use SoftDelete;
    // 设置软删除的默认字段
    // protected $deleteTime = 'delete_time';
    // delete_time 的默认值
    //protected $defaultSoftDelete = 0;

    // 模型事件
//    protected static function onAfterRead($query)
//    {
//        echo '一条数据被查询！';
//    }

//    protected static function onBeforeUpdate($query)
//    {
//        echo '准备修改...';
//    }

//    protected static function onAfterUpdate($query)
//    {
//        echo '已修改完毕...';
//    }





}