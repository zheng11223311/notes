// vue3 创建组件
    const app=Vue.createApp({

    })

    // 挂载组件
    const vm =app.mount('#app')
    // 也可以简写
    app=Vue.createApp({

    }).mount('#app')

了解vue-cli(vue 脚手架)
vue-cli(Command Line Interface)
vue-cli 是vue 官方提供的脚手架工具
默认已经帮我们搭建好了一套利用webpack 管理vue 的项目结构
命令安装: npm install -g @vue/cli        vue-cli2 版本安装npm install -g vue-cli
检查版本:vue --version
创建项目:vue create 项目名称
配置文件详细
应用代码演示

npm install -g @vue/cli --force   强制覆盖旧版本的脚手架
C:\Users\administer\AppData\Roaming\npm\node_modules   //实在不行再此处删除vue 文件,重新下载

C:\Users\administer         //在这里将.vuerc 文件的yarn 修改为npm 来运行   改成"packageManager": "npm"

脚手架3创建项目
vue create demo2
选择 Manually select features   //手动配置
Choose Vue version       //选中
Babel                     //选中
Router                    //选中            
Vuex                   //选中            
CSS Pre-processors     //选中       
3.x (Preview)           //选中 vue3  
Use history mode for router?        //y
 Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default):     //选着预处理的css  Sass/SCSS (with dart-sass)
 ? Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys)             //需要的配置文件是独立的还是放在json 里   In dedicated config files  独立
  Save this as a preset for future projects? (y/N)          //是否保存项目信息  y    所有的配置信息都保存到.vuerc 文件下
  Save preset as:       //项目名称   demo2

扩展配置
在项目下新建一个 vue.config.js 

options 基础定义
options 是vue 实例参数,意思是构造选项
options 的五类属性
数据:data,props,propsData,watch
DOM:el,template,render,renderError
生命周期钩子:beforeCreate,created,beforeMount,mounted,beforeUpdate,updated,actived,deactivated,beforeDestroy,destroyed,errorDaptured
资源:directives,filters,components
组合:parent,mixins,extends,provide.inject
其他:....


vue 模板语法:插值,指令
插值:{{}}
指令:v-
(在{{}} 和v- 指令进行数据绑定是,支持js 单个表达式)
<p> v-once>{{msg}}</p>   //数据值第一次时显示,不响应式
<p> v-pre>{{msg}}</p>   //内容原封不动的展示
<p> v-text='msg'></p>   //就相当于插值表达式的功能
<p> v-html='title'></p>   //可以解析标签

data:{
    msg:'test message',
    title:`<h1 style='color:red;'>Title</h1>`,
}

vue 模板语法:v-bind 绑定属性
插值{{}} 只能用在模板内容中,用于动态内容绑定
如果希望元素的属性也可以动态绑定,需要通过v-bind 指令
v-bind 缩写是 :  
绑定有意义元素中的属性
绑定class 属性,四种用法(字符串,数组,对象,方法)
绑定style 属性

vue 模板语法:计算属性
计算属性关键词:computed
计算属性在处理一些复杂逻辑时是很有用的
计算属性就有缓存功能,有get(),set() 方法
conputed:{
    site:{
        set(){

        },
        get(){
            return 
        }
    }
}
与methods 不同
methods:{
    site(){

    }
}


vue 模板语法:事件监听
在前端开发中,需要经常和用户交互
绑定事件监听器指令:v-on 
缩写: @ (语法糖)
参数:$event
v-on 事件修饰符号
v-on.stop    .stop 阻止事件冒泡
             .self 当前事件在该元素本身触发时才会触发事件,阻止事件(阻止事件在这个元素上的冒泡,但会传递下去,但是这个元素不会有冒泡事件,只有本身被触发才会触发冒泡)
             .capture 添加事件侦听器是,使用事件捕获模式,冒泡时优先捕获这个添加.capture 的冒泡事件,在捕获其他事件
             .prevent 阻止默认事件
             .once 事件值触发一次

vue 模板语法:条件分支指令
v-if 和v-show
    v-if 是真正的条件渲染,因为它会确保在切换过程中条件块内的事件监听器和子组件适当的被销毁和重建
    v-show 就简单的多---不管初始条件是什么,元素总会被渲染,并且只是简单的基于css 进行切换
    v-if v-else
    v-if v-else-if v-else

vue 模板语法:循环遍历指令
遍历指令:v-for 
遍历数组 v-for="(item[,index]) in 数组"
遍历对象 v-for="(value,[key],[index]) in 对象"
vue 中列表循环需要加 :key="唯一标识"唯一标识可以是item 里的id index 等,因为vue 组件高度复用增加key 可以标识组件的唯一性,为了更好地区别各个组件key 的作用主要是为了高效的更新虚拟DOM,使用diff 算法处理方法,对操作前后的dom 树同一层的节点进行对比,一层一层对比

vue 模板语法:v-model
v-model 指令的本质是:他负责监听用户的输入事件,从而更新数据,并对一些极端场景进行一些特殊处理,同时,v-model 会忽略所有表单元素的value,checked,selected 特性的初始值,它总是将vue 实例中的数据作为数据来源.然后当输入事件发生时,实时更新vue 实例中的数据 
实现原理:<input v-bind:value='message' v-on:input='message=$event.target.value'/>
v-model 的修饰符号:
        .lazy      //懒加载修饰符,表单失去焦点时才输出,不会实时输出
        .number     //让其转换成number 类型
        .trim       //自动过滤掉输入框的首尾空格

{{a|a}} 通道
number.toFix(2)  保留2位小数
