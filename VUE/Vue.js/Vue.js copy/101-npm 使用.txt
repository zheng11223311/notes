  脚手架
cnpm i -g @vue/cli@4.5.9

脚手架安装项目
vue create ewshop

清除缓存
npm cache clean


-------------------------
node -v    查看版本
npm -v     查看版本
npm install npm -g   全局安装最新npm 
npm uninstall npm     卸载npm
npm install jquery -g  全局安装jquery
-g  全部项目里,所以在项目个文件夹里看不到
npm install  bootstrap  安装bootstrap

搭建环境时通过如下代码将npm 设置成淘宝镜像
npm config set registry https://registry.npm.taobao.org --global
npm config set disturl https://npm.taobao.org/dist --global

设置当前地址(设置为默认地址)
npm config set registry https://registry.npmjs.org/

查看镜像的配置结果(下载源地址)
npm config get registry
npm config get disturl

使用npm 工具切换淘宝源
npx nrm use taobao

之后如果需要切换回官方源可以使用
npx nrm use npm

运行软件运行npm 需要以管理员来打来,因为权限不足

npm install 模块     安装模块
npm install 模块 -g    全局安装模块
npm list -g   查看所有全局安装的模块
npm list vue   查看某个模块(vue)的版本号
npm -g install npm@5.9.1    更新到5.9.1 版本
npm install -save 模块    -save 在package 文件的dependencies 节点写入依赖
npm install -save dev 模块    -save-dev 在package 文件的devDendencies 节点写入依赖
dependencies: 运行时的依赖,发布后,既生产环境下还要需要的模块
deDependencies: 开发时的依赖,里面的模块是开发时使用的,发布时用不到它,比如项目中使用的gulp,压缩css js 的模块,这些模块在我们的项目部署后是不需要的

npm init --yes 默认生成package 文件
npm init  生成package 文件(需要自己初始化)
name -包名
version -包的版本号
description - 包的描述
homepage - 包的官网 url
author - 包的作者姓名
contributors -包的其他贡献姓名
dependencies -依赖包列表,如果依赖包没有安装,npm 会自动将依赖包安装在node_module 目录下
repository -包代码存放的地方的类型,可以是git 或svn,git 可在GitHub 上
main -main 字段指定了程序的主入口文件,require('模块')就会加载这个文件.这个字段的默认值是模块根目录下面的index.js
key -关键字
package.json 文件中版本号的说明,安装的时候代表不同的含义:
'5.0.3' 表示安装指定的5.0.3 版本
'~5.0.3' 表示安装指定的5.0.x 中最新的版本
'^5.0.3' 表示安装指定的5.x.x 中最新的版本

package.json  script 里面配置 "tes":"dir"   npm run tes  表示查看目录
npm install   根据package.json 安装相关配置文件
require('jquery')  导入jquery   文件与node_modules 在同一级目录下会自动在node_modules 下找到jquery.js 文件,不在node_modules 时,正常路径引用
安装模块时生成node_modules 文件夹

npm install babel-cli  --save-dev   安装ES6 转换包
npm install babel-cli@6.26.0 --save-dev   老师的

babel -V  查看版本

在项目的目录下新建一个.babelrc 文件(这是babel 的配置文件)
{
  "presets":["es2015","stage-2"],   设置转码规则
  "plugins":["transform-runtime"]  设置插件
}
这里我们需要转换成es2015,安装我们需要的库:(多个库一起安装)
npm install babel-core babel-preset-es2015 babel-plugin-transform-runtime babel-preset-stage-2 --save-dev
我们在打开我们babel 项目下的package.json 文件,做如下修改

"script":{"build":"babel src-w-d lib"},

编译整个src 目录并将其输出到lib 目录.这里的src 值的是需要转换的目录,lib 指的是输出的内容的存放目录,-w 其实是-watch 的意思,就是监听文件,实时编译输出
项目目录下新建src 目录和lib 目录,记得一定要建,不然会报错,让后我们启动我们的babel 工程
命令行输入npm run build
命令行输入babel src-w-d lib  也可以打包

npm update --save  更新到最新版本


  npm 指令
    access, adduser, audit, bin, bugs, c, cache, ci, cit,
    clean-install, clean-install-test, completion, config,
    create, ddp, dedupe, deprecate, dist-tag, docs, doctor,
    edit, explore, fund, get, help, help-search, hook, i, init,
    install, install-ci-test, install-test, it, link, list, ln,
    login, logout, ls, org, outdated, owner, pack, ping, prefix,
    profile, prune, publish, rb, rebuild, repo, restart, root,
    run, run-script, s, se, search, set, shrinkwrap, star,
    stars, start, stop, t, team, test, token, tst, un,
    uninstall, unpublish, unstar, up, update, v, version, view,
    whoami



